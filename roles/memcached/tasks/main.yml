---
- name: start memcached
  community.kubernetes.k8s:
    definition: "{{ lookup('template','memcached-deployment.yaml.j2') | from_yaml }}"

- name: create postgresql admin secret
  community.kubernetes.k8s:
    definition: "{{ lookup('template','postgresql-admin-secret.yaml.j2') | from_yaml }}"
  # when: postgresql.createInstance 
  when: postgresql.createInstance and not lookup('k8s',kind='Secret', namespace=ansible_operator_meta.namespace, resource_name=ansible_operator_meta.name+"-postgresql-admin")

- name: show templating results
  debug:
    msg: "{{ lookup('template', './postgresql.yaml.j2') }}"
- name: deploy postgresql
  community.kubernetes.k8s:
    definition: "{{ lookup('template','postgresql.yaml.j2') | from_yaml_all | list }}"
  when: postgresql.createInstance

# - name: create postgresql-pvc
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-pvc.yaml.j2') | from_yaml }}"

# - name: create postgresql-deployment
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-deployment.yaml.j2') | from_yaml }}"


# - name: create postgresql-service
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-service.yaml.j2') | from_yaml }}"


- name: create configmap
  community.kubernetes.k8s:
    # definition: "{{ lookup('template','memcached-configmap.yaml.j2') | from_yaml }}"
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-configmap'
        namespace: '{{ ansible_operator_meta.namespace }}'
      data:
        foo: '{{ foo_value }}'
