---
# - name: all vars
#   debug: 
#    msg: "{{ vars }}"

- name: all vars
  debug: 
   msg: "Hello World! - instance: {{ ansible_operator_meta.name }}"

# - name: start memcached
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','memcached-deployment.yaml.j2') | from_yaml }}"

# - name: create  secret
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql-admin-secret.yaml.j2') | from_yaml }}"
#   when: values.database.create_instance and not lookup('k8s',kind='Secret', namespace=ansible_operator_meta.namespace, resource_name=ansible_operator_meta.name+"-postgresql-admin")

# - name: show templating results
#   debug:
#     msg: "{{ lookup('template', './postgresql.yaml.j2') }}"

# - name: deploy postgresql
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql.yaml.j2') | from_yaml_all | list }}"
#   when: values.database.create_instance

# Or create resources one-by-one
# - name: create postgresql-pvc
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-pvc.yaml.j2') | from_yaml }}"

# - name: create postgresql-deployment
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-deployment.yaml.j2') | from_yaml }}"

# - name: create postgresql-service
#   community.kubernetes.k8s:
#     definition: "{{ lookup('template','postgresql/postgresql-service.yaml.j2') | from_yaml }}"


- name: create configmap
  community.kubernetes.k8s:
    # definition: "{{ lookup('template','memcached-configmap.yaml.j2') | from_yaml }}"
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-configmap'
        namespace: '{{ ansible_operator_meta.namespace }}'
      data:
        foo: '{{ foo_value }}'

- name: print configmap
  debug:
    msg: "{{ cm }}"
  vars:
    cm: "{{ lookup('k8s',kind='ConfigMap', namespace=ansible_operator_meta.namespace, resource_name=ansible_operator_meta.name+'-configmap') }}"

# If we remove the ownerReference for a resource, the operator won't reconcile its changes. Also it won't be deleted when the CR is removed, which may be useful for PVs and related Secrets
- name: remove owner from configmap
  kubernetes.core.k8s:
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: '{{ ansible_operator_meta.name }}-configmap'
        namespace: '{{ ansible_operator_meta.namespace }}'
        ownerReferences:
        - uid: "{{ cm.metadata.ownerReferences[0].uid }}"
          $patch: delete
  when: cm.metadata.ownerReferences[0] is defined
  vars:
    cm: "{{ lookup('k8s',kind='ConfigMap', namespace=ansible_operator_meta.namespace, resource_name=ansible_operator_meta.name+'-configmap') }}"
